setwd("~/GitHub/PcodIBM_EBS_hindcast")
# Clean environment:
rm(list = ls())
# Set working directory to source file location
# Load libraries (not sure if all of them are used):
library(chron)
library(RColorBrewer)
library(lattice)
library(ncdf4)
require(raster)
library(jcolors)
library(gapminder)
library(ggplot2)
library(wesanderson)
library(ggcorrplot)
library(magick)
require(ggplot2)
library(plotly)
library(plyr)
library(dplyr)
require(data.table)
library(mapdata)
library(marmap)
library(tidyverse)
require(mapproj)
require(reshape2)
library(gganimate)
require(lubridate)
require(scales)
require(rnaturalearth)
require(rnaturalearthdata)
library(gridExtra)
library(stringr)
require(sf)
# Some important information:
source('aux_functions.R')
bathy1 = read.csv('main_files_hindcast/bathy1.csv')
bathy2 = read.csv('main_files_hindcast/bathy2.csv')
# Alaska map for plotting
ak = map_data('worldHires','USA:Alaska')
world = ne_countries(scale = "medium", returnclass = "sf")
# Some important information for plotting:
min_plot_year = 2002
max_plot_year = 2018
by_plot_year = 4
x_labs_years = seq(from = min_plot_year, to = max_plot_year, by = by_plot_year)
allYears = 2000:2020
x_labs = rep('', times = length(allYears))
x_labs[allYears %in% x_labs_years] = as.character(x_labs_years)
relday_vec = seq(from = 1, to = 31, by = 3)
thLow1 = 0.025
thHigh1 = 0.975
alphaLevel = 0.5
n_releases = 11
n_grids = 206
n_id = n_grids*n_releases
# Select folders to read:
mainCols = c('#08306B', '#C6DBEF')
# Read output files -------------------------------------------------------
main_folder = 'E:/DisMELS_save_outputs/save_hindcast' # directory where the DisMELS outputs are
# DisMELS outputs not provided due to file size (too big)
save_folder = 'output_data/hindcast' # directory where to save the processed data for plotting
# Read processed data: ----------------------------------------------------
load(file = file.path(save_folder, 'plot_data_0a.RData'))
load(file = file.path(save_folder, 'plot_data_0b.RData'))
load(file = file.path(save_folder, 'plot_data_0c.RData'))
load(file = file.path(save_folder, 'plot_data_0d.RData'))
load(file = file.path(save_folder, 'plot_data_0e.RData'))
load(file = file.path(save_folder, 'plot_data_1a.RData'))
load(file = file.path(save_folder, 'plot_data_1b.RData'))
load(file = file.path(save_folder, 'plot_data_1c.RData'))
load(file = file.path(save_folder, 'plot_data_1d.RData'))
load(file = file.path(save_folder, 'plot_data_2a.RData'))
load(file = file.path(save_folder, 'plot_data_2b.RData'))
load(file = file.path(save_folder, 'plot_data_2c.RData'))
load(file = file.path(save_folder, 'plot_data_2d.RData'))
load(file = file.path(save_folder, 'plot_data_2e.RData'))
load(file = file.path(save_folder, 'plot_data_4a.RData'))
load(file = file.path(save_folder, 'plot_data_4b.RData'))
load(file = file.path(save_folder, 'plot_data_4c.RData'))
load(file = file.path(save_folder, 'plot_data_4d.RData'))
load(file = file.path(save_folder, 'plot_data_4e.RData'))
load(file = file.path(save_folder, 'plot_data_5a.RData'))
load(file = file.path(save_folder, 'plot_data_5b.RData'))
load(file = file.path(save_folder, 'plot_data_5c.RData'))
load(file = file.path(save_folder, 'plot_data_5d.RData'))
load(file = file.path(save_folder, 'plot_data_5e.RData'))
load(file = file.path(save_folder, 'plot_data_6.RData'))
load(file = file.path(save_folder, 'plot_data_6b.RData'))
load(file = file.path(save_folder, 'plot_data_6_5.RData'))
load(file = file.path(save_folder, 'plot_data_8a.RData'))
load(file = file.path(save_folder, 'plot_data_8b.RData'))
load(file = file.path(save_folder, 'plot_data_8c.RData'))
load(file = file.path(save_folder, 'plot_data_9a.RData'))
load(file = file.path(save_folder, 'plot_data_9b.RData'))
load(file = file.path(save_folder, 'plot_data_9c.RData'))
load(file = file.path(save_folder, 'plot_data_10a.RData'))
load(file = file.path(save_folder, 'plot_data_10b.RData'))
load(file = file.path(save_folder, 'plot_data_11a.RData'))
load(file = file.path(save_folder, 'plot_data_11b.RData'))
load(file = file.path(save_folder, 'plot_data_12.RData'))
load(file = file.path(save_folder, 'plot_data_13.RData'))
load(file = file.path(save_folder, 'plot_data_14.RData'))
load(file = file.path(save_folder, 'baseLocs.RData'))
load(file = file.path(save_folder, 'baseLocs2.RData'))
load(file = file.path(save_folder, 'base_wgt.RData'))
# Starvation:
plot_data = bind_rows(plot_data_0a)
plot_data = aggregate(list(porcsurv = plot_data$id), list(rel_date = plot_data$rel_date,
year = plot_data$year),
FUN = function(x) length(unique(x))/n_grids)
plot_data$type = '% survived starvation'
colnames(plot_data)[3] = 'var'
my_data_a = plot_data
# Num ind out of EBS:
plot_data = bind_rows(plot_data_0c)
plot_data = aggregate(list(porcsurv = plot_data$id), list(rel_date = plot_data$rel_date,
year = plot_data$year),
FUN = function(x) length(unique(x))/n_grids)
plot_data$type = '% remained in the EBS'
colnames(plot_data)[3] = 'var'
my_data_b = plot_data
# Prop all individuals alive
plot_data = bind_rows(plot_data_0d)
plot_data = aggregate(list(porcsurv = plot_data$id), list(rel_date = plot_data$rel_date,
year = plot_data$year),
FUN = function(x) length(unique(x))/n_grids)
plot_data$type = 'All alive'
colnames(plot_data)[3] = 'var'
my_data_c = plot_data
my_plot_data = rbind(my_data_a, my_data_b)
my_plot_data$var = my_plot_data$var*100
my_plot_data$type = factor(my_plot_data$type, levels = c("% survived starvation","% remained in the EBS"))
my_plot_data$rel_date = factor(my_plot_data$rel_date, levels = paste0(relday_vec, '-3'))
my_plot_data$rel_date = factor(my_plot_data$rel_date, labels = relday_vec)
# Plot 9: Compare ind rec with rec estimates ------------------------------
# Keep plot_data from previous plot:
rec_estimates = read.csv('Compare_Recs_Surv.csv')
rec_estimates$type = rec_estimates$scenario
rec_estimates = rec_estimates[rec_estimates$scenario == 'sage0_mod', ]
rec_estimates$type = factor(rec_estimates$type, levels = c("sage0_mod"))
rec_estimates$type = factor(rec_estimates$type,
labels = c("Age-0~abundance~(billion~ind)"))
new_plot_data = rbind(plot_data, rec_estimates[,c('year', 'p_index', 'type')])
new_plot_data = new_plot_data[new_plot_data$year <= 2020 & new_plot_data$year >= 2000, ]
# Plot 8: Index of recruitment ---------------------------------------------
plot_data = NULL
hatch_data = bind_rows(plot_data_1d)
psurv100_data = bind_rows(plot_data_2d)
# Index 1: hatch
tmp_data = hatch_data
temp = tmp_data %>%
dplyr::group_by(year) %>%
dplyr::summarise(p_index = sum(hatsuc))
temp$type = 'hatch'
plot_data = rbind(plot_data, temp)
# Index 2: psurv100
tmp_data = psurv100_data
temp = tmp_data %>%
dplyr::group_by(year) %>%
dplyr::summarise(p_index = sum(psurv), .groups = 'drop')
temp$type = 'psurv100'
plot_data = rbind(plot_data, temp)
# Index 3: hatch * psurv100
tmp_data = left_join(hatch_data, psurv100_data, by = c('year', 'id'))
temp = tmp_data %>%
dplyr::group_by(year) %>%
dplyr::summarise(p_index = sum(hatsuc*psurv), .groups = 'drop')
temp$type = 'hatch_psurv100'
plot_data = rbind(plot_data, temp)
# Make plot:
plot_data$type = factor(plot_data$type, levels = c("hatch", 'psurv100', 'hatch_psurv100'))
plot_data$type = factor(plot_data$type, labels = c("Sigma~HS", 'Sigma~P[s]', 'Sigma~P[s]~HS'))
# Plot 9: Compare ind rec with rec estimates ------------------------------
# Keep plot_data from previous plot:
rec_estimates = read.csv('Compare_Recs_Surv.csv')
rec_estimates$type = rec_estimates$scenario
rec_estimates = rec_estimates[rec_estimates$scenario == 'sage0_mod', ]
rec_estimates$type = factor(rec_estimates$type, levels = c("sage0_mod"))
rec_estimates$type = factor(rec_estimates$type,
labels = c("Age-0~abundance~(billion~ind)"))
new_plot_data = rbind(plot_data, rec_estimates[,c('year', 'p_index', 'type')])
new_plot_data = new_plot_data[new_plot_data$year <= 2020 & new_plot_data$year >= 2000, ]
recin2 = ggplot(new_plot_data, aes(x = year, y = p_index)) +
geom_line(color = mainCols[1]) +
theme_bw() +
xlab(NULL) +
ylab(NULL) +
scale_x_continuous(expand=c(0, 0), breaks = seq(from = min_plot_year, to = max_plot_year, by = by_plot_year)) +
scale_color_manual(values = rep(mainCols, 6)) +
theme(legend.position = 'none') +
facet_wrap(. ~ type, scales = 'free_y', strip.position = "left",
labeller = label_parsed, ncol = 2) +
theme(strip.background = element_blank(),
strip.placement = "outside")
plot_dataT = bind_rows(plot_data_8a)
plot_dataT$state = ifelse(test = plot_dataT$state == 'alive', yes = 'Surviving', no = 'Dead')
plot_temp_1 = ggplot(plot_dataT, aes(x = factor(year), color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3, outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab('Temperature (°C)') +
scale_x_discrete(limits = as.character(allYears),
labels = x_labs) +
theme(legend.position = c(0.5, 0.88), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL))
# By release date:
plot_dataT$relday = factor(plot_dataT$relday, levels = paste0(relday_vec, '-3'))
plot_dataT$relday = factor(plot_dataT$relday, labels = relday_vec)
plot_env_1b = ggplot(plot_dataT, aes(x = relday, color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3,  outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab('Temperature (°C)') +
theme(legend.position = c(0.1, 0.88), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL))
plot_env_1b
plot_data = bind_rows(plot_data_9a)
plot_data$variable = factor(plot_data$variable, levels = c("euphausiids",
"neocalanusShelf",
"neocalanus", "copepods"))
plot_data$variable2 = factor(plot_data$variable, labels = c("Eup~(mg~C/m^3)",
"NCaS~(mg~C/m^3)",
"NCaO~(mg~C/m^3)", "Cop~(mg~C/m^3)"))
plot_data$state = ifelse(test = plot_data$state == 'alive', yes = 'Surviving', no = 'Dead')
plot_env_2 = ggplot(plot_data, aes(x = factor(year), color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3, outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab(NULL) +
scale_x_discrete(limits = as.character(allYears),
labels = x_labs) +
theme(legend.position = c(0.1, 0.4), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL)) +
facet_wrap(. ~ variable2, scales = 'free_y', strip.position = "left",
labeller = label_parsed, ncol = 2) +
theme(strip.background = element_blank(),
strip.placement = "outside")
# Relationship between env variables with recruitment estimates -----------
plot_dataT = bind_rows(plot_data_8a)
mean_dfT = plot_dataT %>% group_by(year) %>% summarise(meanValue = mean(value))
plot_data = bind_rows(plot_data_9a)
mean_dfP = plot_data %>% group_by(year, variable) %>% summarise(meanValue = mean(value))
mean_dfP = tidyr::spread(mean_dfP, variable, meanValue)
rec_estimates = read.csv('Compare_Recs_Surv.csv')
rec_estimates = rec_estimates[rec_estimates$year <= 2020 & rec_estimates$year >= 2000 & rec_estimates$scenario == 'sage0_mod', ]
rec_estimates$temperature = mean_dfT$meanValue
rec_estimates$Cop = mean_dfP$copepods
rec_estimates$NCaS = mean_dfP$neocalanusShelf
rec_estimates$NCaO = mean_dfP$neocalanus
rec_estimates$Eup = mean_dfP$euphausiids
#Standardize:
rec_estimates = rec_estimates %>% dplyr::mutate(dplyr::across(p_index:Eup, BBmisc::normalize))
cor_df = rec_estimates %>% dplyr::select(p_index:Eup)
colnames(cor_df) = c('Recruit', 'Temp', 'Cop', 'NCaS', 'NCaO', 'Eup')
# Make correlation plot:
corr <- round(cor(cor_df), 1) # Pearson correlation coefficient
p.mat <- ggcorrplot::cor_pmat(cor_df) # pvalues
print(ggcorrplot(corr, p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank", lab = TRUE))
cor_df
# Make plot correlation Rec and Temp:
cor_df$Recruit2 = BBmisc::normalize(cor_df$Recruit)
cor_df
# Make plot correlation Rec and Temp:
ggplot(cor_df, aes(x = Temp, y = Recruit)) +
geom_point()
# Make plot correlation Rec and Temp:
ggplot(cor_df, aes(x = Temp, y = Recruit)) +
geom_point() +
theme_bw()
# Make plot correlation Rec and Temp:
ggplot(cor_df, aes(x = Temp, y = Recruit)) +
geom_point() +
theme_bw() +
geom_smooth(method='lm', formula= y~x)
# Make plot correlation Rec and Temp:
ggplot(cor_df, aes(x = Temp, y = Recruit)) +
geom_point() +
theme_bw() +
ylab('SAM recruitment estimates') +
xlab('Average temperature experienced by fish') +
geom_smooth(method='lm', formula= y~x)
lm1 = lm(Recruit ~ Temp, data = cor_df)
lm1
summary(lm1)
ggsave(filename = 'figures/hind_cor_recr_temp.png', width = 90, height = 80, dpi = 500, units = 'mm')
