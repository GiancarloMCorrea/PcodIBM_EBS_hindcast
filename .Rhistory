labeller = my_label_parsed)
png(filename = 'figures/hind_rec_index.png', width = 190, height = 60,
units = 'mm', res = 500)
print(recin1)
dev.off()
# Plot 9: Compare ind rec with rec estimates ------------------------------
# Keep plot_data from previous plot:
rec_estimates = read.csv('Compare_Recs_Surv.csv')
rec_estimates$type = rec_estimates$scenario
rec_estimates = rec_estimates[rec_estimates$scenario == 'sage0_mod', ]
rec_estimates$type = factor(rec_estimates$type, levels = c("sage0_mod"))
rec_estimates$type = factor(rec_estimates$type,
labels = c("Age-0~abundance~(billion~ind)"))
new_plot_data = rbind(plot_data, rec_estimates[,c('year', 'p_index', 'type')])
new_plot_data = new_plot_data[new_plot_data$year <= 2020 & new_plot_data$year >= 2000, ]
recin2 = ggplot(new_plot_data, aes(x = year, y = p_index)) +
geom_line(color = mainCols[1]) +
theme_bw() +
xlab(NULL) +
ylab(NULL) +
scale_x_continuous(expand=c(0, 0), breaks = seq(from = min_plot_year, to = max_plot_year, by = by_plot_year)) +
scale_color_manual(values = rep(mainCols, 6)) +
theme(legend.position = 'none') +
facet_wrap(. ~ type, scales = 'free_y', strip.position = "left",
labeller = label_parsed, ncol = 2) +
theme(strip.background = element_blank(),
strip.placement = "outside")
# Make plot:
png(filename = 'figures/hind_rec_index_compare.png', width = 190, height = 120,
units = 'mm', res = 500)
print(recin2)
dev.off()
plot_dataT = bind_rows(plot_data_8a)
plot_dataT$state = str_to_title(plot_dataT$state)
plot_temp_1 = ggplot(plot_dataT, aes(x = factor(year), color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3, outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab('Temperature (°C)') +
scale_x_discrete(limits = as.character(allYears),
labels = x_labs) +
theme(legend.position = c(0.5, 0.88), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL))
# By release date:
plot_dataT$relday = factor(plot_dataT$relday, levels = paste0(relday_vec, '-3'))
plot_dataT$relday = factor(plot_dataT$relday, labels = relday_vec)
plot_env_1b = ggplot(plot_dataT, aes(x = relday, color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3,  outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab('Temperature (°C)') +
theme(legend.position = c(0.1, 0.88), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL))
# Make plot:
png(filename = 'figures/hind_temp_relday.png', width = 95, height = 60,
units = 'mm', res = 500)
print(plot_env_1b)
dev.off()
plot_data = bind_rows(plot_data_9a)
plot_data$variable = factor(plot_data$variable, levels = c("euphausiids",
"neocalanusShelf",
"neocalanus", "copepods"))
plot_data$variable2 = factor(plot_data$variable, labels = c("Eup~(mg~C/m^3)",
"NCaS~(mg~C/m^3)",
"NCaO~(mg~C/m^3)", "Cop~(mg~C/m^3)"))
plot_data$state = str_to_title(plot_data$state)
plot_env_2 = ggplot(plot_data, aes(x = factor(year), color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3, outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab(NULL) +
scale_x_discrete(limits = as.character(allYears),
labels = x_labs) +
theme(legend.position = c(0.1, 0.4), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL)) +
facet_wrap(. ~ variable2, scales = 'free_y', strip.position = "left",
labeller = label_parsed, ncol = 2) +
theme(strip.background = element_blank(),
strip.placement = "outside")
# Make plot:
png(filename = 'figures/hind_preydensity.png', width = 190, height = 120,
units = 'mm', res = 500)
print(plot_env_2)
dev.off()
# Relationship between env variables with recruitment estimates -----------
plot_dataT = bind_rows(plot_data_8a)
mean_dfT = plot_dataT %>% group_by(year) %>% summarise(meanValue = mean(value))
plot_data = bind_rows(plot_data_9a)
mean_dfP = plot_data %>% group_by(year, variable) %>% summarise(meanValue = mean(value))
mean_dfP = tidyr::spread(mean_dfP, variable, meanValue)
rec_estimates = read.csv('Compare_Recs_Surv.csv')
rec_estimates = rec_estimates[rec_estimates$year <= 2020 & rec_estimates$year >= 2000 & rec_estimates$scenario == 'sage0_mod', ]
rec_estimates$temperature = mean_dfT$meanValue
rec_estimates$Cop = mean_dfP$copepods
rec_estimates$NCaS = mean_dfP$neocalanusShelf
rec_estimates$NCaO = mean_dfP$neocalanus
rec_estimates$Eup = mean_dfP$euphausiids
#Standardize:
rec_estimates = rec_estimates %>% dplyr::mutate(dplyr::across(p_index:Eup, BBmisc::normalize))
cor_df = rec_estimates %>% dplyr::select(p_index:Eup)
colnames(cor_df) = c('Recruit', 'Temp', 'Cop', 'NCaS', 'NCaO', 'Eup')
# Make correlation plot:
corr <- round(cor(cor_df), 1) # Pearson correlation coefficient
p.mat <- ggcorrplot::cor_pmat(cor_df) # pvalues
# Make plot: only plot significant squares:
png(filename = 'figures/hind_corr_recenv.png', width = 190, height = 160, units = 'mm', res = 500)
print(ggcorrplot(corr, p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank", lab = TRUE))
dev.off()
# Hatching success
plot_data = bind_rows(plot_data_1b)
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
colnames(plot_data)[4] = 'var'
anom1 = plot_map_var(plot_data = plot_data, legTitle = '', mainTitle = 'Hatch success')
# Survival 100 dph
plot_data = bind_rows(plot_data_2b)
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
colnames(plot_data)[4] = 'var'
plot_data$var = plot_data$var*1e-06
plot_data$var = log(plot_data$var+1)
anom2 = plot_map_var(plot_data = plot_data, legTitle = '', mainTitle = 'Survival probability')
# SL
plot_data = bind_rows(plot_data_4b)
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
colnames(plot_data)[4] = 'var'
anom3 = plot_map_var(plot_data = plot_data, legTitle = '', mainTitle = 'Standard length (mm)')
# Growth performance
plot_data = bind_rows(plot_data_5b)
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
colnames(plot_data)[4] = 'var'
anom4 = plot_map_var(plot_data = plot_data, legTitle = '', mainTitle = 'Growth performance')
# Make plot:
png(filename = 'figures/hind_mapanom_biovar.png', width = 190, height = 130, units = 'mm', res = 500)
grid.arrange(anom1, anom3, anom2, anom4, ncol = 2)
dev.off()
# ----
# Temperature
plot_data = bind_rows(plot_data_8b)
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
colnames(plot_data)[5] = 'var'
anom5 = plot_map_var(plot_data = plot_data, legTitle = '', mainTitle = '')
# Make plot:
png(filename = 'figures/hind_temp.png', width = 95, height = 150, units = 'mm', res = 500)
grid.arrange(plot_temp_1, anom5, ncol = 1)
dev.off()
# Cop:
plot_data = bind_rows(plot_data_9b)
plot_data = plot_data[plot_data$variable == 'copepods', ]
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
colnames(plot_data)[5] = 'var'
anom6 = plot_map_var(plot_data = plot_data, legTitle = '', mainTitle = 'Cop')
# NCaO:
plot_data = bind_rows(plot_data_9b)
plot_data = plot_data[plot_data$variable == 'neocalanus', ]
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
colnames(plot_data)[5] = 'var'
anom7 = plot_map_var(plot_data = plot_data, legTitle = '', mainTitle = 'NCaO')
# NCaS:
plot_data = bind_rows(plot_data_9b)
plot_data = plot_data[plot_data$variable == 'neocalanusShelf', ]
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
colnames(plot_data)[5] = 'var'
anom8 = plot_map_var(plot_data = plot_data, legTitle = '', mainTitle = 'NCaS')
# Eup:
plot_data = bind_rows(plot_data_9b)
plot_data = plot_data[plot_data$variable == 'euphausiids', ]
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
colnames(plot_data)[5] = 'var'
anom9 = plot_map_var(plot_data = plot_data, legTitle = '', mainTitle = 'Eup')
#Make plot:
png(filename = 'figures/hind_mapanom_prey.png', width = 190, height = 130, units = 'mm', res = 500)
grid.arrange(anom9, anom8, anom7, anom6, ncol = 2)
dev.off()
# Map ind dead  -----------------------------------------------------------
n_years = length(allYears)
# Starvation:
plot_data = bind_rows(plot_data_0a)
plot_data = plot_data %>%
count(id)
plot_data$id_grid = baseLocs$id_grid[match(plot_data$id, baseLocs$id)] # replace id column
plot_data = aggregate(list(n = plot_data$n), list(id_grid = plot_data$id_grid), mean)
plot_data$var = plot_data$n/n_years
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data = left_join(baseLocs2, plot_data, by = c('id_grid', 'lon', 'lat'))
plot_data$var[which(is.na(plot_data$var))] = 0
plot_data$var = plot_data$var*100
mapdead1 = plot_map_var2(plot_data = plot_data, legTitle = '', mainTitle = '% survived starvation')
# Out of EBS:
plot_data = bind_rows(plot_data_0c)
plot_data = plot_data %>%
count(id)
plot_data$id_grid = baseLocs$id_grid[match(plot_data$id, baseLocs$id)] # replace id column
plot_data = aggregate(list(n = plot_data$n), list(id_grid = plot_data$id_grid), mean)
plot_data$var = plot_data$n/n_years
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data = left_join(baseLocs2, plot_data, by = c('id_grid', 'lon', 'lat'))
plot_data$var[which(is.na(plot_data$var))] = 0
plot_data$var = plot_data$var*100
mapdead2 = plot_map_var2(plot_data = plot_data, legTitle = '', mainTitle = '% remained in the EBS')
# Make plot:
lay = matrix(c(1,1,2,3), nrow = 2)
png(filename = 'figures/hind_dead.png', width = 190, height = 130, units = 'mm', res = 500)
grid.arrange(plot_5, mapdead1, mapdead2, layout_matrix = lay)
dev.off()
# -------------------------------------------------------------------------
# Information to map
shift_value_1 = 0
shift_value_2 = 360
map_world_df <- map_data('world', wrap=c(shift_value_1, shift_value_2)) %>%
dplyr::filter(region != "Antarctica")
country_shapes <-  geom_polygon(data = map_world_df,
aes(x=long, y = lat, group = group),
fill = "gainsboro",
color = "gainsboro",
size = 0.15)
# List to save plots: (TODO: CHECK)
plotList = list()
indList = 1
cores = list.files(path = main_folder)
cores
i = 1
core_name = cores[i]
files_core = list.files(path = file.path(main_folder, core_name))
fcore = grep(pattern = 'Results_files', x = list.files(path = file.path(main_folder, core_name)))
fcore
core_name
core_name = cores[i]
files_core = list.files(path = file.path(main_folder, core_name))
files_core
main_folder
core_name
list.files(path = file.path(main_folder, core_name))
fcore = list.files(path = file.path(main_folder, core_name))
fcore
j = 1
tmpData = read_data_in(eggInclude = FALSE,
path = file.path(main_folder, core_name, files_core[fcore[j]]))
core_name
files_core[fcore[j]]
files_core
tmpData = read_data_in(eggInclude = FALSE,
path = file.path(main_folder, core_name, files_core[j]))
files_core
j = 1
files_core[j]
file.path(main_folder, core_name, files_core[j])
tmpData = read_data_in(eggInclude = FALSE,
path = file.path(main_folder, core_name, files_core[j]))
files_core
core_name
tmpData = read_data_in(eggInclude = FALSE,
path = file.path(main_folder, core_name))
tmpData$horizPos1 = ifelse(test = tmpData$horizPos1 > 0, yes = tmpData$horizPos1 - 360,
no = tmpData$horizPos1)
tmpData$horizPos1 = tmpData$horizPos1 + 360
tmpData$relDay = lubridate::day(tmpData$startTime)
# Find initial and final points
init_points = tmpData[tmpData[ , .I[which.min(time)], by = id]$V1]
plot_trajectory(tmpData)
# Starvation:
plot_data = bind_rows(plot_data_0a)
plot_data = aggregate(list(porcsurv = plot_data$id), list(year = plot_data$year),
FUN = function(x) length(unique(x))/n_id)
plot_data$type = '% survived starvation'
colnames(plot_data)[2] = 'var'
my_data_a = plot_data
# Num ind out of EBS
plot_data = bind_rows(plot_data_0c)
plot_data = aggregate(list(in_id = plot_data$id), list(year = plot_data$year),
FUN = function(x) length(unique(x))/n_id)
plot_data$type = '% remained in the EBS'
colnames(plot_data)[2] = 'var'
my_data_b = plot_data
# Prop all individuals alive
plot_data = bind_rows(plot_data_0d)
plot_data = aggregate(list(alive_id = plot_data$id), list(year = plot_data$year),
FUN = function(x) length(unique(x))/n_id)
plot_data$type = 'All alive'
colnames(plot_data)[2] = 'var'
my_data_c = plot_data
my_plot_data = rbind(my_data_a, my_data_b)
my_plot_data$var = my_plot_data$var*100
my_plot_data$type = factor(my_plot_data$type, levels = c("% survived starvation","% remained in the EBS"))
plot_5 = ggplot(my_plot_data, aes(x = year, y = var)) +
geom_line(color = mainCols[1]) +
theme_bw() +
xlab(NULL) +
ylab(NULL) +
scale_x_continuous(expand=c(0, 0), breaks = seq(from = min_plot_year, to = max_plot_year, by = by_plot_year)) +
scale_color_manual(values = mainCols) +
theme(legend.position = 'none', strip.background = element_blank(),
strip.placement = "outside") +
facet_wrap(. ~ type, ncol = 1, scales = 'free_y', strip.position = "left")
plot_5
# Plot 11: Environmental variables -------------------------------------------------
plot_dataT = bind_rows(plot_data_8a)
plot_dataT$state = str_to_title(plot_dataT$state)
plot_temp_1 = ggplot(plot_dataT, aes(x = factor(year), color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3, outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab('Temperature (°C)') +
scale_x_discrete(limits = as.character(allYears),
labels = x_labs) +
theme(legend.position = c(0.5, 0.88), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL))
plot_temp_1
plot_dataT
plot_dataT$state
plot_dataT = bind_rows(plot_data_8a)
plot_dataT$state = ifelse(test = plot_dataT$state == 'Alive', yes = 'Surviving', no = 'Dead')
plot_dataT$state = str_to_title(plot_dataT$state)
plot_temp_1 = ggplot(plot_dataT, aes(x = factor(year), color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3, outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab('Temperature (°C)') +
scale_x_discrete(limits = as.character(allYears),
labels = x_labs) +
theme(legend.position = c(0.5, 0.88), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL))
plot_temp_1
plot_dataT = bind_rows(plot_data_8a)
plot_dataT$state = ifelse(test = plot_dataT$state == 'Alive', yes = 'Surviving', no = 'Dead')
plot_dataT$state
plot_dataT = bind_rows(plot_data_8a)
plot_dataT$state
plot_dataT = bind_rows(plot_data_8a)
plot_dataT$state = ifelse(test = plot_dataT$state == 'alive', yes = 'Surviving', no = 'Dead')
plot_dataT$state = str_to_title(plot_dataT$state)
plot_dataT = bind_rows(plot_data_8a)
plot_dataT$state = ifelse(test = plot_dataT$state == 'alive', yes = 'Surviving', no = 'Dead')
plot_temp_1 = ggplot(plot_dataT, aes(x = factor(year), color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3, outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab('Temperature (°C)') +
scale_x_discrete(limits = as.character(allYears),
labels = x_labs) +
theme(legend.position = c(0.5, 0.88), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL))
plot_temp_1
plot_dataT = bind_rows(plot_data_8a)
plot_dataT$state = ifelse(test = plot_dataT$state == 'alive', yes = 'Surviving', no = 'Dead')
plot_temp_1 = ggplot(plot_dataT, aes(x = factor(year), color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3, outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab('Temperature (°C)') +
scale_x_discrete(limits = as.character(allYears),
labels = x_labs) +
theme(legend.position = c(0.5, 0.88), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL))
plot_data = bind_rows(plot_data_9a)
plot_data$variable = factor(plot_data$variable, levels = c("euphausiids",
"neocalanusShelf",
"neocalanus", "copepods"))
plot_data$variable2 = factor(plot_data$variable, labels = c("Eup~(mg~C/m^3)",
"NCaS~(mg~C/m^3)",
"NCaO~(mg~C/m^3)", "Cop~(mg~C/m^3)"))
plot_dataT$state = ifelse(test = plot_dataT$state == 'alive', yes = 'Surviving', no = 'Dead')
plot_env_2 = ggplot(plot_data, aes(x = factor(year), color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3, outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab(NULL) +
scale_x_discrete(limits = as.character(allYears),
labels = x_labs) +
theme(legend.position = c(0.1, 0.4), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL)) +
facet_wrap(. ~ variable2, scales = 'free_y', strip.position = "left",
labeller = label_parsed, ncol = 2) +
theme(strip.background = element_blank(),
strip.placement = "outside")
# Make plot:
png(filename = 'figures/hind_preydensity.png', width = 190, height = 120,
units = 'mm', res = 500)
print(plot_env_2)
dev.off()
# Temperature
plot_data = bind_rows(plot_data_8b)
plot_data$lon = baseLocs2$lon[match(plot_data$id_grid, baseLocs2$id_grid)]
plot_data$lat = baseLocs2$lat[match(plot_data$id_grid, baseLocs2$id_grid)]
colnames(plot_data)[5] = 'var'
anom5 = plot_map_var(plot_data = plot_data, legTitle = '', mainTitle = '')
# Make plot:
png(filename = 'figures/hind_temp.png', width = 95, height = 150, units = 'mm', res = 500)
grid.arrange(plot_temp_1, anom5, ncol = 1)
dev.off()
plot_data = bind_rows(plot_data_9a)
plot_data$variable = factor(plot_data$variable, levels = c("euphausiids",
"neocalanusShelf",
"neocalanus", "copepods"))
plot_data$variable2 = factor(plot_data$variable, labels = c("Eup~(mg~C/m^3)",
"NCaS~(mg~C/m^3)",
"NCaO~(mg~C/m^3)", "Cop~(mg~C/m^3)"))
plot_data$state = ifelse(test = plot_data$state == 'alive', yes = 'Surviving', no = 'Dead')
plot_env_2 = ggplot(plot_data, aes(x = factor(year), color = factor(state),
fill = factor(state))) +
geom_boxplot(aes(y = value), alpha=0.3, outlier.size = 0.6) +
theme_bw() +
xlab(NULL) +
ylab(NULL) +
scale_x_discrete(limits = as.character(allYears),
labels = x_labs) +
theme(legend.position = c(0.1, 0.4), legend.background =element_blank()) +
guides(fill=guide_legend(title=NULL),
color=guide_legend(title=NULL)) +
facet_wrap(. ~ variable2, scales = 'free_y', strip.position = "left",
labeller = label_parsed, ncol = 2) +
theme(strip.background = element_blank(),
strip.placement = "outside")
# Make plot:
png(filename = 'figures/hind_preydensity.png', width = 190, height = 120,
units = 'mm', res = 500)
print(plot_env_2)
dev.off()
# List to save plots:
plotList = list()
indList = 1
cores = list.files(path = main_folder)
for(i in seq_along(cores)) {
core_name = cores[i]
tmpData = read_data_in(eggInclude = FALSE,
path = file.path(main_folder, core_name))
tmpData$horizPos1 = ifelse(test = tmpData$horizPos1 > 0, yes = tmpData$horizPos1 - 360,
no = tmpData$horizPos1)
tmpData$horizPos1 = tmpData$horizPos1 + 360
tmpData$relDay = lubridate::day(tmpData$startTime)
# Find initial and final points
init_points = tmpData[tmpData[ , .I[which.min(time)], by = id]$V1]
plotList[[indList]] = plot_trajectory(tmpData)
indList = indList+1
}
plotList2 = plotList
png(filename = 'figures/hind_trajectories.png', width = 190, height = 140, units = 'mm', res = 500)
do.call("grid.arrange", c(plotList2, ncol = 6))
dev.off()
?scale_x_continuous
# Some important information:
source('aux_functions.R')
# List to save plots:
plotList = list()
indList = 1
cores = list.files(path = main_folder)
i = 1
core_name = cores[i]
tmpData = read_data_in(eggInclude = FALSE,
path = file.path(main_folder, core_name))
tmpData$horizPos1 = ifelse(test = tmpData$horizPos1 > 0, yes = tmpData$horizPos1 - 360,
no = tmpData$horizPos1)
tmpData$horizPos1 = tmpData$horizPos1 + 360
tmpData$relDay = lubridate::day(tmpData$startTime)
# Find initial and final points
init_points = tmpData[tmpData[ , .I[which.min(time)], by = id]$V1]
plotList[[i]] = plot_trajectory(tmpData)
print(i)
png(filename = 'figures/hind_trajectories.png', width = 190, height = 130, units = 'mm', res = 500)
do.call("grid.arrange", c(plotList, ncol = 6, nrow = 4))
dev.off()
# Some important information:
source('aux_functions.R')
# List to save plots:
plotList = list()
indList = 1
cores = list.files(path = main_folder)
for(i in seq_along(cores)) {
core_name = cores[i]
tmpData = read_data_in(eggInclude = FALSE,
path = file.path(main_folder, core_name))
tmpData$horizPos1 = ifelse(test = tmpData$horizPos1 > 0, yes = tmpData$horizPos1 - 360,
no = tmpData$horizPos1)
tmpData$horizPos1 = tmpData$horizPos1 + 360
tmpData$relDay = lubridate::day(tmpData$startTime)
# Find initial and final points
init_points = tmpData[tmpData[ , .I[which.min(time)], by = id]$V1]
plotList[[i]] = plot_trajectory(tmpData)
print(i)
}
png(filename = 'figures/hind_trajectories.png', width = 190, height = 130, units = 'mm', res = 500)
do.call("grid.arrange", c(plotList, ncol = 6, nrow = 4))
dev.off()
png(filename = 'figures/hind_trajectories.png', width = 190, height = 110, units = 'mm', res = 500)
do.call("grid.arrange", c(plotList, ncol = 6, nrow = 4))
dev.off()
